#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// JISキーコード対応表

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        jp {
            bindings = <&kp LANG_HANGEUL>;
            key-positions = <18 19>;
            layers = <0>;
        };

        en {
            bindings = <&kp LANG_HANJA>;
            key-positions = <19 20>;
            layers = <0>;
        };

        mouse_layer {
            bindings = <&to 1>;
            key-positions = <20 21>;
        };

        bt_layer {
            bindings = <&mo 4>;
            key-positions = <10 11>;
        };

        default_layer {
            bindings = <&to 0>;
            key-positions = <8 9>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 2 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        td_brackets_left: tap_dance_brackets_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp JP_LPAR>, <&kp JP_LBKT>;
        };

        td_brackets_right: tap_dance_brackets_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp JP_RPAR>, <&kp JP_RBKT>;
        };

        shift_controll: shift_controll {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CONTROLL";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp LCTRL>, <&kp LS(LCTRL)>;
        };

        semicoron_coron: semicoron_coron {
            compatible = "zmk,behavior-tap-dance";
            label = "SEMICORON_CORON";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp SQT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            bindings = <
&kp Q   &kp W   &kp E         &kp R           &kp T                                              &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A   &kp S   &kp D         &kp F           &kp G        &kp ESCAPE        &td_brackets_left   &kp H        &kp J  &kp K      &kp L    &lt 3 MINUS
&kp Z   &kp X   &kp C         &kp V           &kp B        &kp LCTRL         &td_brackets_right  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&trans  &trans  &kp LEFT_WIN  &kp LEFT_SHIFT  &lt 1 SPACE  &kp LEFT_ALT      &kp BACKSPACE       &lt 2 ENTER                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        MOUSE {
            bindings = <
&kp F9  &kp F10  &kp F11  &kp F12  &trans                      &trans         &kp HOME  &kp END   &trans     &trans
&kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans      &trans  &kp PAGE_UP    &mkp MB1  &kp UP    &mkp MB2   &trans
&kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans      &trans  &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans   &trans   &trans   &trans  &trans      &trans  &trans                                        &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp LS(SQT)   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS                         &trans  &kp LS(N7)  &kp LBKT    &kp EQUAL   &kp INT3
&kp SLASH     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LS(SEMI)  &trans      &trans  &trans  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &semicoron_coron
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_ENTER  &trans      &trans  &trans  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp INT1
&trans        &trans        &kp DOT       &trans        &trans        &trans      &trans  &trans                                      &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
